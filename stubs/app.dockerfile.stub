# syntax=docker/dockerfile:1

# --------------------------------
# Stage 1 - Composer dependencies
# --------------------------------
FROM composer:2 AS vendor

WORKDIR /var/www/html

COPY . .

RUN composer install --no-dev --prefer-dist --optimize-autoloader

# --------------------------------
# Stage 2 - Node build for frontend assets
# --------------------------------
FROM node:23-alpine AS frontend

WORKDIR /var/www/html

COPY . .

RUN npm install --legacy-peer-deps
RUN npm run build

# --------------------------------
# Stage 3 - PHP-FPM runtime
# --------------------------------
FROM php:8.4-fpm-alpine

# Install system dependencies
RUN apk add --no-cache \
    bash \
    libpng-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    freetype-dev \
    oniguruma-dev \
    libxml2-dev \
    zip \
    unzip \
    curl \
    git \
    mysql-client \
    openssh

# Install PHP extensions
RUN docker-php-ext-install pdo
RUN docker-php-ext-install pdo_mysql
RUN docker-php-ext-install mbstring
RUN docker-php-ext-install exif
RUN docker-php-ext-install pcntl
RUN docker-php-ext-install bcmath
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp
RUN docker-php-ext-install -j$(nproc) gd

# Set working directory
WORKDIR /var/www/html

# Copy built backend from vendor stage
COPY --from=vendor /var/www/html /var/www/html

# Copy compiled frontend assets
COPY --from=frontend /var/www/html/public/ /var/www/html/public/

# Entrypoint script
COPY .dockerizer/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["php-fpm"]
